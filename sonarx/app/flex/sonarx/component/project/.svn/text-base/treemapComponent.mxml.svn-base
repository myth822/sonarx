<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:toolbox="com.flextoolbox.controls.*"
		 initialize="init()" horizontalCenter="0" >
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.utils.ColorUtil;
			
			[Bindable]
			/**
			 * @private
			 * This is where the data is stored after loading it from the external
			 * XML file.
			 */
			protected var indexData:XML;
			
			/**
			 * @private
			 * This value is used to calculate the leaf colors. It is the maximum
			 * absolute value from among the @change attribute in the data provider.
			 */
			private var _colorRange:Number = 0;
			
			/**
			 * @private
			 * Loads the XML data file right away.
			 */
			private function init():void
			{
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, dataLoadCompleteHandler);
				loader.addEventListener(IOErrorEvent.IO_ERROR, dataLoadErrorHandler);
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, dataLoadErrorHandler);
				loader.load(new URLRequest("http://localhost:3000/project_detail.xml"));
			}
			
			/**
			 * @private
			 * Determines the color of a leaf in the TreeMap.
			 */
			private function itemToColor(item:XML):uint
			{
				var percent:Number = parseFloat(item.@value2.toString());
				//			var changeValue:Number = parseFloat(item.@value.toString());
				//			var percent:Number = Math.abs(changeValue) / this._colorRange;
				
				//			if(changeValue >= 0)
				//			{
				return this.blendColors(0xFF0000, 0xFF6600, percent);
				//			}
				//			return this.blendColors(0x990000, 0x000000, percent);
			}
			
			/**
			 * @private
			 * Determines the data tip text for an item in the TreeMap.
			 */
			private function itemToDataTip(item:XML):String
			{
				return item.@name + "\nRank: #" + item.@position + "\nRating: " + item.@value + "%\nChange: " + item.@value2 + "%";
			}
			
			private function itemClick(item:XML):void
			{
				Alert.show("Do you want to save your changes?", "Save Changes", 3, this, null);
			}
			
			/**
			 * @private
			 * Determines the data tip text for a branch in the TreeMap.
			 */
			private function branchToDataTip(branch:XML):String
			{
				return "Source: " + branch.@source;
			}
			
			/**
			 * @private
			 * Determines the blended color between two separate colors using a
			 * range from 0 to 1 where a value of 0 returns 100% of the first color
			 * and a value of 1 return 100% of the second color.
			 */
			private function blendColors(color1:uint, color2:uint, percent:Number = 0.5):uint
			{
				//			var remaining:Number = 1 - percent;
				//			
				//			var red1:uint = (color1 >> 16) & 0xff;
				//			var green1:uint = (color1 >> 8) & 0xff;
				//			var blue1:uint = color1 & 0xff;
				//			
				//			var red2:uint = (color2 >> 16) & 0xff;
				//			var green2:uint = (color2 >> 8) & 0xff;
				//			var blue2:uint = color2 & 0xff;
				//			 
				//			
				//			color1 = ((red1 * percent) << 16) + ((green1 * percent) << 8) + blue1 * percent;
				//			color2 = ((red2 * remaining) << 16) + ((green2 * remaining) << 8) + blue2 * remaining;
				
				switch (Math.round(percent/10)) {
					case 0:
						color1 = 0xFF0000;
						break;
					case 1:
						color1 = 0xFF3300;
						break;
					case 2:
						color1 = 0xFF6600;
						break;
					case 3:
						color1 = 0xFF9900;
						break;
					case 4:
						color1 = 0xFFCC00;
						break;
					case 5:
						color1 = 0xFFFF00;
						break;
					case 6:
						color1 = 0x66FFCC;
						break;
					case 7:
						color1 = 0x66FF99;
						break;
					case 8:
						color1 = 0x66FF66;
						break;
					default:
						color1 = 0x66FF00;
						break;
				}
				
				return color1;
			}
			
			/**
			 * @private
			 * When the data finishes loading, save it in the local variable that
			 * is bound to the TreeMap. Then parse the data to determine the maximum
			 * value of the @change attribute.
			 */
			private function dataLoadCompleteHandler(event:Event):void
			{
				var loader:URLLoader = URLLoader(event.currentTarget);
				loader.removeEventListener(Event.COMPLETE, dataLoadCompleteHandler);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, dataLoadErrorHandler);
				loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, dataLoadErrorHandler);
				
				this.indexData = new XML(loader.data);
				
				var range:Number = 0;
				var changes:XMLList = this.indexData.language.@value2;
				for each(var changeValue:XML in changes)
				{
					range = Math.max(range, Math.abs(parseFloat(changeValue)));
				}
				
				this._colorRange = range;
			}
			
			/**
			 * @private
			 * If there is a problem loading the data, display a message for the
			 * user.
			 */
			private function dataLoadErrorHandler(event:ErrorEvent):void
			{
				var loader:URLLoader = URLLoader(event.currentTarget);
				loader.removeEventListener(Event.COMPLETE, dataLoadCompleteHandler);
				loader.removeEventListener(IOErrorEvent.IO_ERROR, dataLoadErrorHandler);
				loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, dataLoadErrorHandler);
				
				//this.status.text = "Error: Could not load data.";
			}
			
		]]>
	</fx:Script>
	<fx:Style>
		LinkButton
		{
			fontSize: 8;
		}
		
		FormItem
		{
			labelStyleName: formItemLabel;
		}
		
		.instructions
		{
			color: #ffffff;
		}
		
		.formItemLabel
		{
			color: #2B535C;
			fontWeight: bold;
		}
		
		.treeMapLeaf
		{
			/* tells the leaf renderer to size its label to fill as much space
			as it can. it should try to avoid creating line breaks in the middle
			of words */
			fontSizeMode: fitToBoundsWithoutBreaks;
			
			/* sets the minimum font size value used by the fontSizeMode
			specified above */
			fontSize: 4;
		}
	</fx:Style>

	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<toolbox:TreeMap id="treemap" width="900" height="420" 
		 selectable="true" leafStyleName="treeMapLeaf"
		 dataProvider="{indexData}"
		 labelField="@name" branchLabelField="@source" weightField="@value"
		 dataTipFunction="{itemToDataTip}" branchDataTipFunction="{branchToDataTip}"
		 colorFunction="{itemToColor}" itemClickFunction="{itemClick}"/>
</s:HGroup>
